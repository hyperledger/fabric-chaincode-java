# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
# 
# fabric-chaincode-java azure pipeline configuration.
# 
# Daily build for final quality
# cf https://crontab.guru/#0_23_*_*_*
schedules:
  - cron: "0 23 * * *"
    displayName: 'Chaincode 1.4 Java Nightly Driver'
    branches:
      include:
        - release-1.4
    always: true



trigger:
  branches:
    include:
      - 'master'
  tags:
    include:
      - '*'

# These are custom defined variables, the pipeline one is currently used for the build scripts
# to know to produce tests results in XML format for Azure to consume, for developers
# this isn't set so command line output is given
# 
variables:
  - group: Chaincode_Java_Creds
  - group: JARSigningPublish
  - name: component
    value: fabric-chaincode-java
  - name: pipeline
    value: ci
  - name: NEXUS_REPO_URL
    value: nexus3.hyperledger.org:10003
  - name: PUSH_VERSION
    value: stable

pool:
  vmImage: 'ubuntu-latest'

# 
# The stages and jobs, potential for rationalization and optimization
# Keeping it simple and explict whilst we gain experience
stages:
  - stage: Build_and_test
    jobs:
      - job: main      
        steps:
          - script: |
              env | sort
              java -version
          - task: Gradle@2
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew'
              gradleOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '$(System.DefaultWorkingDirectory)/**/TEST-*.xml'
              tasks: 'build'
          - task: PublishCodeCoverageResults@1
            inputs: 
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/fabric-chaincode-shim/build/reports/jacoco/test/jacocoTestReport.xml'
          - task: PublishCodeCoverageResults@1
            inputs:
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/fabric-chaincode-shim/build/reports/jacoco/test/jacocoTestReport.xml"
            # Copy the built artifacts to the staging directory, tgz, and the docker image    
          - script: |
              set -ev
              ./gradlew publishToMavenLocal
              tar -zcvf localmaven.tgz ${HOME}/.m2/repository/org/hyperledger              
              docker image save hyperledger/fabric-javaenv | gzip > $(Build.ArtifactStagingDirectory)/fabric-javaenv.tar.gz
            displayName: 'Package tgz and docker image'    
          - task: PublishBuildArtifacts@1    
            inputs:
              pathToPublish: localmaven.tgz
              artifactName: java-tgz
          - task: PublishBuildArtifacts@1    
            inputs:
              pathToPublish:  $(Build.ArtifactStagingDirectory)/fabric-javaenv.tar.gz
              artifactName: javaenv-docker-image

      - job: javadoc
        condition: and(succeeded(),eq(variables['Build.Reason'], 'IndividualCI'))
        steps:
          - script: ./gradlew javadoc
            displayName: 'Build JavaDoc'
          - script: |
              git fetch origin
              git checkout -b gh-pages origin/gh-pages
              mkdir -p $(Build.SourceBranchName)/api
              rm -rf $(Build.SourceBranchName)/api/*
              cp -r fabric-chaincode-shim/build/docs/javadoc/* $(Build.SourceBranchName)/api
            displayName: 'Update gh-pages branch'
          - script: |
              git config --global user.email "Hyperledger Bot"
              git config --global user.name "hlfdev.azp@gmail.com"
              git add -A
              git commit -m "Publishing GitHub Pages"
              git push https://$(GITHUB-PAT)@github.com/hyperledger/fabric-chaincode-java.git gh-pages
            displayName: 'Commit gh-pages changes'

      # Publish the snapshot images etc.
      # Original source of these is https://github.com/hyperledger/ci-management/blob/master/jjb/fabric-chaincode-java/shell/include-raw-publish-docker-jar.sh
      - job: 
        dependsOn: main
        condition: and(succeeded(),eq(variables['Build.Reason'], 'IndividualCI'))
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: javaenv-docker-image
              path: $(Build.SourcesDirectory)/build
          - script: |
              docker image load --input build/fabric-javaenv.tar.gz
              docker images
              # Publish docker images to nexus repository
              docker login ${DOCKER_REGISTRY_URL} --username=${DOCKER_REGISTRY_USERNAME} --password=${DOCKER_REGISTRY_PASSWORD}
              echo "Logged in to docker registry"
              # tag javaenv image to $PUSH_VERSION
              docker tag hyperledger/fabric-javaenv ${DOCKER_REGISTRY_URL}/fabric-javaenv:amd64-${MAPPED_VERSION}
              # push javaenv to nexus repository
              docker push ${DOCKER_REGISTRY_URL}/fabric-javaenv:amd64-${MAPPED_VERSION}
            env:
              DOCKER_REGISTRY_USERNAME: $(GITHUB_REGISTRY_USER)
              DOCKER_REGISTRY_PASSWORD: $(GITHUB_REGISTRY_PWD_TOKEN)
              DOCKER_REGISTRY_URL: docker.pkg.github.com/hyperledger/fabric-chaincode-java
              MAPPED_VERSION: $(PUSH_VERSION)

  # As the next script is more complex and uses loops, run this descretely in a sh file
  # Publishing step for git tags
  - stage: Publish_tag
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
    jobs:
      - job: publish_release
        steps:

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: javaenv-docker-image
              path: $(Build.SourcesDirectory)/build
          - task: DownloadSecureFile@1
            name: keyring
            inputs:
              secureFile: secring.gpg
          - script: |
              env | sort

              # temporarily use this approach instead of the gittag
              VERSION=$(cat build.gradle |  sed -n "s/version =.*'\(.*\)\(-SNAPSHOT\)\?'/\1/p"  
              VERSION=${VERSION// }
              echo Version is :${VERSION}:
              
              
              docker image load --input build/fabric-javaenv.tar.gz
              docker images
              # Publish docker images to nexus repository
              docker login ${DOCKER_REGISTRY_URL} --username=${DOCKER_REGISTRY_USERNAME} --password=${DOCKER_REGISTRY_PASSWORD}
              echo "Logged in to docker registry"
              # tag javaenv image to $PUSH_VERSION
              docker tag hyperledger/fabric-javaenv fabric-javaenv:amd64-${VERSION}
              # push javaenv to nexus repository
              docker push fabric-javaenv:amd64-${VERSION}
            env:
              DOCKER_REGISTRY_USERNAME: $(DockerHub-Username)
              DOCKER_REGISTRY_PASSWORD: $(DockerHub-Password)
          - script: |
              env | sort

              # temporarily use this approach instead of the gittag
              VERSION=$(cat build.gradle |  sed -n "s/version =.*'\(.*\)\(-SNAPSHOT\)\?'/\1/p"  
              VERSION=${VERSION// }
              echo Version is :${VERSION}:
              
              ./gradlew -Psigning.keyId=${SIGNING_ID} -Psigning.password=${SIGNING_PASSWORD} -Psigning.secretKeyRingFile=${KEYRING_FILE} -PossrhUsername=${OSSRH_USER} -PossrhPassword=${OSSRH_PASSWORD} uploadArchives
            env:
              SIGNING_ID: $(JAR-Signing-Id)
              SIGNING_PASSWORD: $(JAR-Signing-Password)              
              KEYRING_FILE: $(keyring.secureFilePath)
              OSSRH_USER: $(OSSRH-User)
              OSSRH_PASSWORD: $(OSSRH-Password)