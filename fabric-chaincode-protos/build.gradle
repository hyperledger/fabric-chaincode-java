/*
 * Copyright IBM Corp. 2017 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
apply plugin: 'com.google.protobuf'
apply plugin: 'de.undercouch.download'
apply plugin: 'maven-publish'

apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    jcenter()
    mavenCentral()
}

// Fabric branch to download proto files from
def fabricBranch = 'release-1.4'
// Fabric Github repository link
def fabricRepo = 'https://raw.githubusercontent.com/hyperledger/fabric'
def protosDir = 'src/main/protos'
// List of files to download
def protoFiles = ['protos/common/common.proto'                     : "$protosDir/common/common.proto",
                  'protos/ledger/queryresult/kv_query_result.proto': "$protosDir/ledger/queryresult/kv_query_result.proto",
                  'protos/peer/chaincode.proto'                    : "$protosDir/peer/chaincode.proto",
                  'protos/peer/chaincode_event.proto'              : "$protosDir/peer/chaincode_event.proto",
                  'protos/peer/chaincode_shim.proto'               : "$protosDir/peer/chaincode_shim.proto",
                  'protos/peer/proposal.proto'                     : "$protosDir/peer/proposal.proto",
                  'protos/peer/proposal_response.proto'            : "$protosDir/peer/proposal_response.proto",
                  'protos/msp/identities.proto'                    : "$protosDir/msp/identities.proto",
                  'protos/peer/transaction.proto'                  : "$protosDir/peer/transaction.proto",
                  'protos/msp/msp_principal.proto'                 : "$protosDir/msp/msp_principal.proto",
                  'protos/common/policies.proto'                   : "$protosDir/common/policies.proto",
                  'protos/token/expectations.proto'                : "$protosDir/token/expectations.proto",
                  'protos/token/transaction.proto'                 : "$protosDir/token/transaction.proto"]

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
        classpath 'de.undercouch:gradle-download-task:3.4.2'
    }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.5.1'
    compile 'com.google.protobuf:protobuf-java-util:3.5.1'
    compile 'io.grpc:grpc-netty:1.23.0'
    compile 'io.grpc:grpc-protobuf:1.23.0'
    compile 'io.grpc:grpc-stub:1.23.0'
    // Required if using Java 11+ as no longer bundled in the core libraries
    compile 'javax.annotation:javax.annotation-api:1.3.2'
}

protobuf {
    protoc {
        // download the protobuf compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        // define grpc plugin for the protobuf compiler
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            // apply the grpc plugin for the protobuf compiler
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/src"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/grpc']
        }
        proto {
            srcDirs 'src/main/protos'
        }
    }
}

task downloadProtoFiles {
    doLast {
        protoFiles.each { k, v ->
            download {
                src "$fabricRepo/$fabricBranch/$k"
                    dest v
                    onlyIfModified true
            }
        }
    }
}

publishing {
    publications {
        protosJar(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

project.tasks.withType(Javadoc).all {
    enabled = false
}

javadoc {
    failOnError = false
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
}

if (JavaVersion.current().isJava8Compatible()) {
    project.tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

signing {
    required {gradle.taskGraph.hasTask(uploadArchives) }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.findProperty('ossrhUsername'), password: project.findProperty('ossrhPassword'))
            }

            pom.project {
                name 'JavaChaincodeProtobuf'
                packaging 'jar'
                description 'Hyperldger Fabric Java chaincode protobuf files'
                url 'http://www.hyperledger.org/'

                scm {
                    url 'https://github.com/hyperledger/fabric-chaincode-java.git'
                }
                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'gennadylaventman'
                        name 'Gennady Laventman'
                        email 'gennady@il.ibm.com'
                    }
                    developer {
                        id 'luiss'
                        name 'Luis Sanchez'
                        email 'luiss@me.com'
                    }
                    developer {
                        id 'C0rWin'
                        name 'Artem Barger'
                        email 'bartem@il.ibm.com'
                    }
                    developer {
                        id 'denyeart'
                        name 'David Enyeart'
                        email 'enyeart@us.ibm.com'
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
