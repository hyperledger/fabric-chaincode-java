/*
 * Copyright IBM Corp. 2018 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.jreleaser' version '1.18.0'
    id 'jacoco'
    id 'pmd'
}

pmd {
    toolVersion = '7.14.0'
    ruleSetFiles = files('../pmd-ruleset.xml')
    ruleSets = [] // explicitly set to empty to avoid using the default configuration
    ignoreFailures = false
}

pmdTest.enabled = false

configurations {
    runtimeClasspath {
        resolutionStrategy.activateDependencyLocking()
    }
}

tasks.withType(org.gradle.api.tasks.testing.Test) {
    systemProperty 'CORE_CHAINCODE_LOGGING_LEVEL', 'DEBUG'
}

dependencies {
    implementation platform('com.google.protobuf:protobuf-bom:4.31.1')
    implementation platform('io.grpc:grpc-bom:1.73.0')
    implementation platform('io.opentelemetry:opentelemetry-bom:1.51.0')

    implementation 'org.hyperledger.fabric:fabric-protos:0.3.7'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.81'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.81'
    implementation 'io.github.classgraph:classgraph:4.8.179'
    implementation 'com.github.erosb:everit-json-schema:1.14.6'
    implementation 'org.json:json:20250517'
    implementation 'com.google.protobuf:protobuf-java-util'

    implementation 'io.grpc:grpc-netty-shaded'
    implementation 'io.grpc:grpc-protobuf'
    implementation 'io.grpc:grpc-stub'
    testImplementation 'io.grpc:grpc-inprocess'

    implementation 'io.opentelemetry:opentelemetry-api'
    implementation 'io.opentelemetry.proto:opentelemetry-proto:1.7.0-alpha'
    implementation 'io.opentelemetry:opentelemetry-sdk'
    implementation 'io.opentelemetry:opentelemetry-sdk-extension-autoconfigure'
    implementation 'io.opentelemetry:opentelemetry-sdk-trace'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
    implementation 'io.opentelemetry:opentelemetry-extension-trace-propagators'
    implementation 'io.opentelemetry.semconv:opentelemetry-semconv:1.32.0'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-grpc-1.6:2.16.0-alpha'
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }

}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'org/hyperledger/fabric/protos/**')
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['org.hyperledger.fabric.shim.helper.Channel',
                        'org.hyperledger.fabric.shim.impl.Handler',
                        'org.hyperledger.fabric.shim.impl.ChaincodeSupportStream.1',
                        'org.hyperledger.fabric.contract.ContractRouter',
                        'org.hyperledger.fabric.contract.routing.impl.ContractDefinitionImpl',
                        'org.hyperledger.fabric.contract.routing.RoutingRegistry',
                        'org.hyperledger.fabric.contract.execution.impl.ContractInvocationRequest',
                        'org.hyperledger.fabric.contract.routing.TransactionType',
                        'org.hyperledger.fabric.contract.metadata.MetadataBuilder',
                        'org.hyperledger.fabric.shim.ChaincodeBase*',
                        'org.hyperledger.fabric.shim.impl.InvocationTaskManager',
                        'org.hyperledger.fabric.shim.impl.InvocationStubImpl*',
                        'org.hyperledger.fabric.shim.impl.ChaincodeSupportClient*',
                        'org.hyperledger.fabric.shim.impl.InvocationTaskExecutor',
                        'org.hyperledger.fabric.shim.impl.ChaincodeInvocationTask',
                        'org.hyperledger.fabric.shim.impl.QueryResultsIteratorImpl*',
                        'org.hyperledger.fabric.shim.impl.ChaincodeMessageFactory',
                        'org.hyperledger.fabric.shim.ChaincodeServerProperties']
            limit {
                minimum = 0.86
            }
        }

        rule {
            element = 'CLASS'
            includes = ['org.hyperledger.fabric.shim.helper.Channel',
                        'org.hyperledger.fabric.contract.ContractRouter',
                        'org.hyperledger.fabric.contract.execution.impl.ContractInvocationRequest',
                        'org.hyperledger.fabric.contract.routing.impl.ContractDefinitionImpl',
                        'org.hyperledger.fabric.contract.routing.RoutingRegistry',
                        'org.hyperledger.fabric.shim.impl.Handler',
                        'org.hyperledger.fabric.shim.ChaincodeBase',
                        'org.hyperledger.fabric.contract.metadata.MetadataBuilder',
                        'org.hyperledger.fabric.shim.impl.InvocationTaskManager',
                        'org.hyperledger.fabric.shim.impl.InvocationTaskExecutor',
                        'org.hyperledger.fabric.shim.impl.ChaincodeSupportClient',
                        'org.hyperledger.fabric.shim.impl.ChaincodeMessageFactory']
            limit {
                minimum = 0.71
            }
        }
    }
}

test.finalizedBy(jacocoTestReport)
test.finalizedBy(jacocoTestCoverageVerification)

tasks.register('licenseCheck') {
    group = "license"
    description = "Checks the License part of each source file"

    println "Checking Licences..."
    def noSPDX = new LinkedList<File>()
    def missing = new LinkedList<File>()
    sourceSets.forEach {
        sourceSet ->
            sourceSet.allSource.findAll {
                !it.path.contains("build") &&
                  !(it.path.contains("test") && it.path.contains("resources"))
            }.each {
                file ->
                    if (!file.name.contains("json")) {
                        BufferedReader r = new BufferedReader(new FileReader(file))
                        def line, hasSPDX = false, hasTraditional = false
                        while ((line = r.readLine()) != null) {
                            if (line.contains("SPDX-License-Identifier")) {
                                hasSPDX = true
                                break
                            }
                            if (line.contains("http://www.apache.org/licenses/LICENSE-2.0")) {
                                hasTraditional = true
                                break
                            }
                        }
                        if (!hasSPDX) {
                            if (hasTraditional) {
                                noSPDX.add(file)
                            } else {
                                missing.add(file)
                            }
                        }
                    }
            }
    }

    if (noSPDX.isEmpty()) {
        println "All remaining files have Apache 2.0 headers."
    } else {
        println "We are standardizing with the SPDX style license headers."
        println "The following files contain the traditional license headers which are still valid:"
        noSPDX.each {
            f -> println "\t" + f.getPath()
        }
        println "If you need to make a content update, please replace the Apache license header comment text with:"
        println "\tSPDX-License-Identifier: Apache-2.0\n"
    }

    if (!missing.isEmpty()) {
        def error = "The following files are missing Apache 2.0 headers:\n"
        missing.each {
            f -> error += f.getPath() + "\n"
        }
        error += "Fatal Error - All files must have a license header"
        throw new IllegalArgumentException(error)
    }
}


javadoc {
    failOnError = true
    excludes = ['org/hyperledger/fabric/contract/ContextFactory.java',
                'org/hyperledger/fabric/contract/ContractRouter.java',
                'org/hyperledger/fabric/contract/ContractRuntimeException.java',
                'org/hyperledger/fabric/contract/execution/**',
                'org/hyperledger/fabric/contract/metadata/**',
                'org/hyperledger/fabric/contract/routing/**',
                'org/hyperledger/fabric/contract/systemcontract/**',
                'org/hyperledger/fabric/ledger/**',
                'org/hyperledger/fabric/shim/helper/**',
                'org/hyperledger/fabric/**/impl/**']

    source = sourceSets.main.allJava

    classpath = sourceSets.main.runtimeClasspath

    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('Xwerror', '-quiet')
    options.overview = "src/main/java/org/hyperledger/fabric/overview.html"

}

def final stagingDeployUrl = layout.buildDirectory.dir('staging-deploy')

publishing {
     publications {
         shim(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom {
                name = 'JavaChaincodeShim'
                packaging = 'jar'
                description = 'Hyperledger Fabric Java Chaincode Shim'
                url = 'https://hyperledger.github.io/fabric-chaincode-java/'

                scm {
                    connection = 'scm:git:https://github.com/hyperledger/fabric-chaincode-java.git'
                    developerConnection = 'scm:git:ssh://github.com:hyperledger/fabric-chaincode-java.git'
                    url = 'https://github.com/hyperledger/fabric-chaincode-java'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'denyeart'
                        name = 'David Enyeart'
                        email = 'enyeart@us.ibm.com'
                    }
                    developer {
                        id = 'bestbeforetoday'
                        name = 'Mark S. Lewis'
                        email = 'Mark.S.Lewis@outlook.com'
                    }
                }
            }
         }

     }

    repositories {
        maven {
            name = "Staging"
            url = stagingDeployUrl
        }

        maven {
            name = "GitHub"
            url = "https://maven.pkg.github.com/hyperledger/fabric-chaincode-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    required = { gradle.taskGraph.hasTask(":${project.name}:publishShimPublicationToStagingRepository") }

    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.shim
}

jreleaser {
    gitRootSearch = true
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    sign = false
                    stagingRepository(file(stagingDeployUrl).toString())
                }
            }
        }
    }
    release {
        github {
            enabled = false
        }
    }
}

// Need to specify the sourcesJar task BEFORE the java{withSourcesJar()} so that it picks up the duplicatesStratergy
// otherwise this fails with a duplicates error.
// (see https://github.com/gradle/gradle/issues/17236)

tasks.register('sourcesJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

java {
    withJavadocJar()
    withSourcesJar()
}


build.dependsOn licenseCheck

// setup more detailed test output formats
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test).configureEach {

    environment "CORE_PEER_LOCALMSPID", "mymsp"

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_OUT
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
              TestLogEvent.FAILED,
              TestLogEvent.PASSED,
              TestLogEvent.SKIPPED,
              TestLogEvent.STANDARD_ERROR,
              TestLogEvent.STANDARD_OUT
            exceptionFormat = TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite {desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' +
                  ('-' * repeatLength))
            }
        }
    }
}
