# Copyright the Hyperledger Fabric contributors. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0

name: Fabric Chaincode and Smart Contract - Java
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs: 
      PACKAGE_VERSION: ${{ steps.builddata.outputs.PACKAGE_VERSION }}
      MINOR_PACKAGE_VERSION: ${{ steps.builddata.outputs.MINOR_PACKAGE_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: BuildData
        id: builddata
        run: |
          set -xev
          env | sort
          
          # handle full version number
          VERSION=$(./gradlew -q printVersionName | head -n 1 | cut -d'-' -f1)  
          VERSION=${VERSION// }
          echo Current version in code is :${VERSION}:
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          # handle minor version
          MINOR_VERSION=$(echo $VERSION | sed 's/^\([0-9]\{1,\}\.[0-9]\{1,\}\)\..*/\1/')
          MINOR_VERSION=${MINOR_VERSION// }
          echo Current minor version in code is :${MINOR_VERSION}:
          echo "MINOR_PACKAGE_VERSION=${MINOR_VERSION}" >> $GITHUB_OUTPUT    

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
        cache: 'gradle'
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
<<<<<<< HEAD
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build        
    - name: Create artifacts
      env:
        SIGNING_ID: ${{ secrets.SIGNING_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        KEYRING_FILE: ${{ secrets.KEYRING_FILE }}
      run: |
        set -xev
        
        echo $KEYRING_FILE > keyringfile.gpg
        ./gradlew -Psigning.keyId=${SIGNING_ID} -Psigning.password=${SIGNING_PASSWORD} -Psigning.secretKeyRingFile=keyringfile.gpg publishShimJarPublicationToMavenLocal
        
        tar -zcvf localmaven.tgz ${HOME}/.m2/repository/org/hyperledger
        docker image save hyperledger/fabric-javaenv | gzip > fabric-javaenv.tar.gz
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: javaenv-docker-image
        path: |
          fabric-javaenv.tar.gz
    - name: Upload JARs tgz
      uses: actions/upload-artifact@v3
      with:
        name: Java JARs
        path: |
          localmaven.tgz

  publishjars:
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Push to registry
        run: |
          echo $KEYRING_FILE > keyringfile.gpg
          ./gradlew -Psigning.keyId=${SIGNING_ID} -Psigning.password=${SIGNING_PASSWORD} -Psigning.secretKeyRingFile=keyringfile.gpg -PossrhUsername=${OSSRH_USER} -PossrhPassword=${OSSRH_PASSWORD} publishAllPublicationsToReleaseRepository
        env:
          SIGNING_ID: ossrh
          SIGNING_PASSWORD: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
          KEYRING_FILE: ${{ secrets.OSSRH_GPG_SECRET_KEY }}
          OSSRH_USER: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}}


  publishdocker:
    runs-on: ubuntu-latest
    needs: [setup,build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'
      - uses: actions/download-artifact@v3
        with:
          name: javaenv-docker-image
          path: build/          
      - name: Push to registry
        run: |
          set -xev
          wget -qO "$PWD/manifest-tool" https://github.com/estesp/manifest-tool/releases/download/v1.0.0/manifest-tool-linux-amd64
          chmod +x ./manifest-tool

          echo "Version strings are ${PACKAGE_VERSION} ${MINOR_PACKAGE_VERSION}"

          docker image load --input build/fabric-javaenv.tar.gz
          docker images
          docker login ${DOCKER_REGISTRY_URL} --username=${DOCKER_REGISTRY_USERNAME} --password=${DOCKER_REGISTRY_PASSWORD}
          echo "Logged in to docker registry"
          # tag javaenv image to PACKAGE_VERSION
          docker tag hyperledger/fabric-javaenv hyperledger/fabric-javaenv:amd64-${PACKAGE_VERSION}
          # push javaenv to repository
          docker push hyperledger/fabric-javaenv:amd64-${PACKAGE_VERSION}
          ./manifest-tool push from-args --platforms linux/amd64 --template "hyperledger/fabric-javaenv:amd64-${PACKAGE_VERSION}" --target "hyperledger/fabric-javaenv:${PACKAGE_VERSION}"
          ./manifest-tool push from-args --platforms linux/amd64 --template "hyperledger/fabric-javaenv:amd64-${PACKAGE_VERSION}" --target "hyperledger/fabric-javaenv:${MINOR_PACKAGE_VERSION}"
        env:
          DOCKER_REGISTRY_USERNAME:  ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_REGISTRY_PASSWORD:  ${{ secrets.DOCKERHUB_TOKEN }}
          PACAKGE_VERSION: ${{  needs.setup.outputs.PACKAGE_VERSION }}
          MINOR_PACKAGE_VERSION: ${{ needs.setup.outputs.MINOR_PACKAGE_VERSION }}
=======
    - name: Dependency Check
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
          arguments: |
            :fabric-chaincode-shim:dependencyCheckAnalyze
    - name: Build and Unit test
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
          arguments: |
            :fabric-chaincode-shim:build 
            -xdependencyCheckAnalyze            
    
  intergationtest:  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Populate chaincode with latest java-version
        run: |
          ./gradlew -I $GITHUB_WORKSPACE/fabric-chaincode-integration-test/chaincodebootstrap.gradle -PchaincodeRepoDir=$GITHUB_WORKSPACE/fabric-chaincode-integration-test/src/contracts/fabric-shim-api/repository publishShimJarPublicationToFabricRepository
          ./gradlew -I $GITHUB_WORKSPACE/fabric-chaincode-integration-test/chaincodebootstrap.gradle -PchaincodeRepoDir=$GITHUB_WORKSPACE/fabric-chaincode-integration-test/src/contracts/fabric-ledger-api/repository publishShimJarPublicationToFabricRepository
          ./gradlew -I $GITHUB_WORKSPACE/fabric-chaincode-integration-test/chaincodebootstrap.gradle -PchaincodeRepoDir=$GITHUB_WORKSPACE/fabric-chaincode-integration-test/src/contracts/bare-gradle/repository publishShimJarPublicationToFabricRepository
          ./gradlew -I $GITHUB_WORKSPACE/fabric-chaincode-integration-test/chaincodebootstrap.gradle -PchaincodeRepoDir=$GITHUB_WORKSPACE/fabric-chaincode-integration-test/src/contracts/bare-maven/repository publishShimJarPublicationToFabricRepository
          ./gradlew -I $GITHUB_WORKSPACE/fabric-chaincode-integration-test/chaincodebootstrap.gradle -PchaincodeRepoDir=$GITHUB_WORKSPACE/fabric-chaincode-integration-test/src/contracts/wrapper-maven/repository publishShimJarPublicationToFabricRepository


      - name: Ensure that the Peer/weft tools are available
        run: |
          curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh | bash -s -- binary
          npm install -g @hyperledger-labs/weft
          
          # set the path and cfg env var for the rest of the step
          echo "FABRIC_CFG_PATH=$GITHUB_WORKSPACE/config" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
      - name: versions
        run: |
          peer version
          weft --version
      - name: Integration Tests
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: |
            :fabric-chaincode-integration-test:build 
            -xdependencyCheckAnalyze 
<<<<<<< HEAD
>>>>>>> 0fb6d7e (Update to fixed level of dependency checker)
=======
  
  
>>>>>>> bf5ac7a (Massive update to intergation test)
